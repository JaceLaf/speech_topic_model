# Imports necessary modules
import argparse
import json
import pickle
from gensim.models.ldamodel import LdaModel
import numpy as np
from matplotlib.figure import Figure
from matplotlib.table import Table, table
import matplotlib.pyplot as plt

# Uses argparse to take files and needed input variables
parser = argparse.ArgumentParser()
parser.add_argument(
    "counts",
    help="Counts file generated by apply script."
)
parser.add_argument(
    "figure",
    help="Image file name to save figure to."
)
parser.add_argument(
    "model",
    help="Model file generated by training script."
)
parser.add_argument(
    "--title",
    dest="title",
    help="Title for top of figure.",
    default="Variation in topics"
)
parser.add_argument(
    "--xlabel",
    dest="xlabel",
    help="Label for the x axis.",
    default="Group"
)
parser.add_argument(
    "--ylabel",
    dest="ylabel",
    help="Label for the y axis.",
    default="Topic proportion"
)
parser.add_argument(
    "--legend",
    dest="legend",
    help="Label for the legend.",
    default="Topics"
)
parser.add_argument(
    "--topic_name",
    dest="topic_names",
    help="Specify human-readable names for topics, e.g. to call the first topic 'Animals', use '--topic_name 1 Animals'.  Can be specified multiple times.",
    nargs=2,
    action="append",
    default=[]
)
args = parser.parse_args()

# Loads in the models and the counts
with open(args.model, "rb") as mod:
    model = pickle.loads(mod.read())

with open(args.counts, "rt") as ifd:
    counts = json.loads(ifd.read())

# Sums the counts for each topic in the data
topic_counts = np.zeros(model.num_topics)
for topic_id, count in counts:
    topic_counts[int(topic_id)] = count

topic_proportions = topic_counts/topic_counts.sum()

# Creates a bargraph containing the counts of each topic
fig = Figure(figsize=(20,10))
ax = fig.add_axes([0.05, 0.45, 0.9, 0.5])

topic_name_lookup = {int(k) : v for k, v in args.topic_names}
topic_labels = [topic_name_lookup.get(i+1, f"Topic {i+1}") for i in range(model.num_topics)]

ax.bar(range(model.num_topics), topic_proportions, tick_label=topic_labels)

ax.set_title(args.title, fontsize=20, fontweight="bold")
ax.set_xlabel(args.xlabel, fontsize=16)
ax.set_ylabel(args.ylabel, fontsize=16)

ax.set_xticks(range(model.num_topics))
ax.set_xticklabels(topic_labels, rotation=45, ha='right')
ax.set_yticks([], [])

fig.savefig(args.figure)
